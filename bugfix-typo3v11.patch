From cbc8df2209ae613717d3633e0dacc77358056af7 Mon Sep 17 00:00:00 2001
From: Adam Koppe <adam.koppe@3m5.de>
Date: Wed, 5 Mar 2025 21:08:58 +0100
Subject: [PATCH] [BUGFIX] parallel execution of non-parallel scheduler task

Previously, multiple scheduler invocations may have picked up the same
non-parallel scheduler task at the same time. This was due to a
Time-of-Check Time-of-Use style issue in Scheduler::executeTask():
the check preventing parallel executions of non-parallel tasks occurred
long before the execution was registered. If multiple parallel
Scheduler::executeTask() calls hit that time window, they all continued
to actually execute the non-parallel task. This issue is fixed by
checking the task execution id after the reservation, since that one is
a guaranteed zero-based task execution counter.

Removing the toctou window requires fixing another issue in
AbstractTask::markExecution() and AbstractTask::unmarkExecution(): The
future serialized_executions task field value was built upon some past
serialized_executions value. If two processes ran one of these methods
in parallel with such timing that the time window between the SELECT and
UPDATE sql statements overlapped, only one operation succeeded. This
issue is fixed by restricting UPDATE to only be applied if the new value
was built upon the latest serialized_executions value.

A full reproduction is available online:
https://github.com/adamkoppede/typo3-parallel-scheduler-task-processing-test

Change-Id: I1264b5c248dd9aa5402383a498d82650932f29e4
---
 Classes/Scheduler.php  |  55 +++++----
 .../scheduler/Classes/Task/AbstractTask.php   | 114 +++++++++++-------
 2 files changed, 104 insertions(+), 65 deletions(-)

diff --git a/Classes/Scheduler.php b/Classes/Scheduler.php
index 24bfde3500f..f2d56455fb2 100644
--- a/Classes/Scheduler.php
+++ b/Classes/Scheduler.php
@@ -186,28 +186,41 @@ class Scheduler implements SingletonInterface
             ]);
             // Register execution
             $executionID = $task->markExecution();
-            $failure = null;
-            try {
-                // Execute task
-                $successfullyExecuted = $task->execute();
-                if (!$successfullyExecuted) {
-                    throw new FailedExecutionException('Task failed to execute successfully. Class: ' . get_class($task) . ', UID: ' . $task->getTaskUid(), 1250596541);
+            if (!$task->areMultipleExecutionsAllowed() && $executionID > 0) {
+                // The first execution id of an idle task is always 0.
+                // A non zero execution id means that another execution of this
+                // task started between the $task->isExecutionRunning() check
+                // and the execution registration in $task->markExecution().
+                $task->unmarkExecution($executionID, null);
+                $this->logger->info('Task is already running and multiple executions are not allowed, skipping! Class: {class}, UID: {uid}', [
+                    'class' => get_class($task),
+                    'uid' => $task->getTaskUid(),
+                ]);
+                $result = false;
+            } else {
+                $failure = null;
+                try {
+                    // Execute task
+                    $successfullyExecuted = $task->execute();
+                    if (!$successfullyExecuted) {
+                        throw new FailedExecutionException('Task failed to execute successfully. Class: ' . get_class($task) . ', UID: ' . $task->getTaskUid(), 1250596541);
+                    }
+                } catch (\Throwable $e) {
+                    // Store exception, so that it can be saved to database
+                    $failure = $e;
+                }
+                // Un-register execution
+                $task->unmarkExecution($executionID, $failure);
+                // Log completion of execution
+                $this->logger->info('Task executed. Class: {class}, UID: {uid}', [
+                    'class' => get_class($task),
+                    'uid' => $task->getTaskUid(),
+                ]);
+                // Now that the result of the task execution has been handled,
+                // throw the exception again, if any
+                if ($failure instanceof \Throwable) {
+                    throw $failure;
                 }
-            } catch (\Throwable $e) {
-                // Store exception, so that it can be saved to database
-                $failure = $e;
-            }
-            // Un-register execution
-            $task->unmarkExecution($executionID, $failure);
-            // Log completion of execution
-            $this->logger->info('Task executed. Class: {class}, UID: {uid}', [
-                'class' => get_class($task),
-                'uid' => $task->getTaskUid(),
-            ]);
-            // Now that the result of the task execution has been handled,
-            // throw the exception again, if any
-            if ($failure instanceof \Throwable) {
-                throw $failure;
             }
         }
         return $result;
diff --git a/Classes/Task/AbstractTask.php b/Classes/Task/AbstractTask.php
index d7e3bd3d950..add9408a059 100644
--- a/Classes/Task/AbstractTask.php
+++ b/Classes/Task/AbstractTask.php
@@ -428,41 +428,55 @@ abstract class AbstractTask implements LoggerAwareInterface
         $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)
             ->getQueryBuilderForTable('tx_scheduler_task');
 
-        $row = $queryBuilder
-            ->select('serialized_executions')
-            ->from('tx_scheduler_task')
-            ->where(
-                $queryBuilder->expr()->eq('uid', $queryBuilder->createNamedParameter($this->taskUid, Connection::PARAM_INT))
-            )
-            ->executeQuery()
-            ->fetchAssociative();
+        for (;;) {
+            $row = $queryBuilder
+                ->select('serialized_executions')
+                ->from('tx_scheduler_task')
+                ->where(
+                    $queryBuilder->expr()->eq('uid', $queryBuilder->createNamedParameter($this->taskUid, Connection::PARAM_INT))
+                )
+                ->executeQuery()
+                ->fetchAssociative();
+
+            $checkedValue = (string)($row['serialized_executions'] ?? '');
+
+            $runningExecutions = [];
+            if ($row && !empty($row['serialized_executions'])) {
+                $runningExecutions = unserialize($row['serialized_executions']);
+            }
+            // Count the number of existing executions and use that number as a key
+            // (we need to know that number, because it is returned at the end of the method)
+            $numExecutions = count($runningExecutions);
+            $runningExecutions[$numExecutions] = time();
+            $updateCount = GeneralUtility::makeInstance(ConnectionPool::class)
+                ->getConnectionForTable('tx_scheduler_task')
+                ->update(
+                    'tx_scheduler_task',
+                    [
+                        'serialized_executions' => serialize($runningExecutions),
+                        'lastexecution_time' => time(),
+                        // Define the context in which the script is running
+                        'lastexecution_context' => Environment::isCli() ? 'CLI' : 'BE',
+                    ],
+                    [
+                        'uid' => $this->taskUid,
+                        'serialized_executions' => $checkedValue,
+                    ],
+                    [
+                        'serialized_executions' => Connection::PARAM_LOB,
+                    ]
+                );
+            assert($updateCount === 0 || $updateCount === 1);
 
-        $runningExecutions = [];
-        if ($row && !empty($row['serialized_executions'])) {
-            $runningExecutions = unserialize($row['serialized_executions']);
+            // We need to try again with the new "serialized_executions" value
+            // that was set in the time between the SELECT and the UPDATE sql
+            // statements.
+            if ($updateCount === 0) {
+                continue;
+            }
+
+            return $numExecutions;
         }
-        // Count the number of existing executions and use that number as a key
-        // (we need to know that number, because it is returned at the end of the method)
-        $numExecutions = count($runningExecutions);
-        $runningExecutions[$numExecutions] = time();
-        GeneralUtility::makeInstance(ConnectionPool::class)
-            ->getConnectionForTable('tx_scheduler_task')
-            ->update(
-                'tx_scheduler_task',
-                [
-                    'serialized_executions' => serialize($runningExecutions),
-                    'lastexecution_time' => time(),
-                    // Define the context in which the script is running
-                    'lastexecution_context' => Environment::isCli() ? 'CLI' : 'BE',
-                ],
-                [
-                    'uid' => $this->taskUid,
-                ],
-                [
-                    'serialized_executions' => Connection::PARAM_LOB,
-                ]
-            );
-        return $numExecutions;
     }
 
     /**
@@ -477,17 +491,21 @@ abstract class AbstractTask implements LoggerAwareInterface
         $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)
             ->getQueryBuilderForTable('tx_scheduler_task');
 
-        $row = $queryBuilder
-            ->select('serialized_executions')
-            ->from('tx_scheduler_task')
-            ->where(
-                $queryBuilder->expr()->eq('uid', $queryBuilder->createNamedParameter($this->taskUid, Connection::PARAM_INT))
-            )
-            ->executeQuery()
-            ->fetchAssociative();
+        for (;;) {
+            $row = $queryBuilder
+                ->select('serialized_executions')
+                ->from('tx_scheduler_task')
+                ->where(
+                    $queryBuilder->expr()->eq('uid', $queryBuilder->createNamedParameter($this->taskUid, Connection::PARAM_INT))
+                )
+                ->executeQuery()
+                ->fetchAssociative();
+
+            if (!$row || ($previousValue = (string)($row['serialized_executions'] ?? '')) === '') {
+                break;
+            }
 
-        if ($row && $row['serialized_executions'] !== '') {
-            $runningExecutions = unserialize($row['serialized_executions']);
+            $runningExecutions = unserialize($previousValue);
             // Remove the selected execution
             unset($runningExecutions[$executionID]);
             if (!empty($runningExecutions)) {
@@ -515,7 +533,7 @@ abstract class AbstractTask implements LoggerAwareInterface
                 $failureString = '';
             }
             // Save the updated executions list
-            GeneralUtility::makeInstance(ConnectionPool::class)
+            $updateCount = GeneralUtility::makeInstance(ConnectionPool::class)
                 ->getConnectionForTable('tx_scheduler_task')
                 ->update(
                     'tx_scheduler_task',
@@ -525,11 +543,19 @@ abstract class AbstractTask implements LoggerAwareInterface
                     ],
                     [
                         'uid' => $this->taskUid,
+                        'serialized_executions' => $previousValue,
                     ],
                     [
                         'serialized_executions' => Connection::PARAM_LOB,
                     ]
                 );
+            assert($updateCount === 0 || $updateCount === 1);
+
+            // We can only stop trying if our new "serialized_executions" was
+            // actually built upon the latest "serialized_executions" value.
+            if ($updateCount === 1) {
+                break;
+            }
         }
     }
 
-- 
2.43.0

