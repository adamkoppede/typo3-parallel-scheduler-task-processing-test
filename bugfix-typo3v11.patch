From 66ce1ee77f4abaca11730f1dde6d63afe392e77a Mon Sep 17 00:00:00 2001
From: Adam Koppe <adam.koppe@3m5.de>
Date: Wed, 5 Mar 2025 21:08:58 +0100
Subject: [PATCH] [BUGFIX] Parallel execution of non-parallel scheduler task

Close a Time-of-Check Time-of-Use style time window in
Scheduler::executeTask() by checking the actual task execution id value
after the allocation instead of checking for any task execution id
allocations long before the actual execution id allocation happens. The
time window allowed multiple scheduler invocations to pick up and
execute the same non-parallel scheduler task at the same time.

Make AbstractTask::markExecution() and AbstractTask::unmarkExecution()
atomic by modifying (UPDATE) the value of the "serialized_executions"
field only if it's still set to the update base value previously
SELECT-ed. That allows parallel invocations of
AbstractTask::markExecution() to no longer obtain the same execution id
and fixes a bug in AbstractTask::unmarkExecution() that reverted
removals of execution ids.

Adjust AbstractTask::markExecution() to no longer
hallucinate a non-existing execution id of 0 in situations were the
persistence record associated with the task cannot be SELECT-ed from the
database.

Change AbstractTask::unmarkExecution() to no longer override the
previous value of the tasks record "lastexecution_failure" field if the
given `$failureReason` method argument is `null`. This is due to the
change described in the first paragraph, where we need to remove the
execution of a task when it wasn't executed. The previous as well as the
updated implementation of Scheduler::executeTask() always pass in a
value of type `string` if the task execution happened.

A full reproduction is available online on GitHub:
https://github.com/adamkoppede/typo3-parallel-scheduler-task-processing-test

Change-Id: I1264b5c248dd9aa5402383a498d82650932f29e4
Resolves: #106318
Releases: 11.5
---
 typo3/sysext/scheduler/Classes/Scheduler.php  |  49 ++++---
 .../scheduler/Classes/Task/AbstractTask.php   | 134 +++++++++++-------
 2 files changed, 110 insertions(+), 73 deletions(-)

diff --git a/Classes/Scheduler.php b/Classes/Scheduler.php
index 24bfde3500f..9747add94ec 100644
--- a/Classes/Scheduler.php
+++ b/Classes/Scheduler.php
@@ -169,34 +169,37 @@ class Scheduler implements SingletonInterface
         // Set a scheduler object for the task again,
         // as it was removed during the save operation
         $task->setScheduler();
-        $result = true;
-        // Task is already running and multiple executions are not allowed
-        if (!$task->areMultipleExecutionsAllowed() && $task->isExecutionRunning()) {
+
+        // Reserve an id for the upcoming execution
+        $executionID = $task->markExecution();
+
+        // Make sure we're the only one executing this single-execution-only task
+        if (!$task->areMultipleExecutionsAllowed() && $executionID > 0) {
+            $task->unmarkExecution($executionID, false);
             // Log multiple execution error
             $this->logger->info('Task is already running and multiple executions are not allowed, skipping! Class: {class}, UID: {uid}', [
                 'class' => get_class($task),
                 'uid' => $task->getTaskUid(),
             ]);
-            $result = false;
-        } else {
-            // Log scheduler invocation
-            $this->logger->info('Start execution. Class: {class}, UID: {uid}', [
-                'class' => get_class($task),
-                'uid' => $task->getTaskUid(),
-            ]);
-            // Register execution
-            $executionID = $task->markExecution();
-            $failure = null;
-            try {
-                // Execute task
-                $successfullyExecuted = $task->execute();
-                if (!$successfullyExecuted) {
-                    throw new FailedExecutionException('Task failed to execute successfully. Class: ' . get_class($task) . ', UID: ' . $task->getTaskUid(), 1250596541);
-                }
-            } catch (\Throwable $e) {
-                // Store exception, so that it can be saved to database
-                $failure = $e;
+            return false;
+        }
+
+        // Log scheduler invocation
+        $this->logger->info('Start execution. Class: {class}, UID: {uid}', [
+            'class' => get_class($task),
+            'uid' => $task->getTaskUid(),
+        ]);
+
+        $failure = null;
+        try {
+            // Execute task
+            $successfullyExecuted = $task->execute();
+            if (!$successfullyExecuted) {
+                throw new FailedExecutionException('Task failed to execute successfully. Class: ' . get_class($task) . ', UID: ' . $task->getTaskUid(), 1250596541);
             }
+        } catch (\Throwable $e) {
+            $failure = $e;
+        } finally {
             // Un-register execution
             $task->unmarkExecution($executionID, $failure);
             // Log completion of execution
@@ -209,8 +212,8 @@ class Scheduler implements SingletonInterface
             if ($failure instanceof \Throwable) {
                 throw $failure;
             }
+            return true;
         }
-        return $result;
     }
 
     /**
diff --git a/Classes/Task/AbstractTask.php b/Classes/Task/AbstractTask.php
index d7e3bd3d950..25c0a09a5f7 100644
--- a/Classes/Task/AbstractTask.php
+++ b/Classes/Task/AbstractTask.php
@@ -421,6 +421,9 @@ abstract class AbstractTask implements LoggerAwareInterface
      * This method adds current execution to the execution list
      * It also logs the execution time and mode
      *
+     * The execution id is guaranteed to start from zero if the task has no
+     * currently running execution at the time of id allocation.
+     *
      * @return int Execution id
      */
     public function markExecution()
@@ -428,66 +431,86 @@ abstract class AbstractTask implements LoggerAwareInterface
         $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)
             ->getQueryBuilderForTable('tx_scheduler_task');
 
-        $row = $queryBuilder
-            ->select('serialized_executions')
-            ->from('tx_scheduler_task')
-            ->where(
-                $queryBuilder->expr()->eq('uid', $queryBuilder->createNamedParameter($this->taskUid, Connection::PARAM_INT))
-            )
-            ->executeQuery()
-            ->fetchAssociative();
+        for (;;) {
+            $row = $queryBuilder
+                ->select('serialized_executions')
+                ->from('tx_scheduler_task')
+                ->where(
+                    $queryBuilder->expr()->eq('uid', $queryBuilder->createNamedParameter($this->taskUid, Connection::PARAM_INT))
+                )
+                ->executeQuery()
+                ->fetchAssociative();
+
+            $checkedValue = isset($row['serialized_executions'])
+                ? (string)$row['serialized_executions']
+                : null;
+
+            $runningExecutions = [];
+            if ($row && !empty($row['serialized_executions'])) {
+                $runningExecutions = unserialize($row['serialized_executions']);
+            }
+            // Count the number of existing executions and use that number as a key
+            // (we need to know that number, because it is returned at the end of the method)
+            $numExecutions = count($runningExecutions);
+            $runningExecutions[$numExecutions] = time();
+            $updateCount = GeneralUtility::makeInstance(ConnectionPool::class)
+                ->getConnectionForTable('tx_scheduler_task')
+                ->update(
+                    'tx_scheduler_task',
+                    [
+                        'serialized_executions' => serialize($runningExecutions),
+                        'lastexecution_time' => time(),
+                        // Define the context in which the script is running
+                        'lastexecution_context' => Environment::isCli() ? 'CLI' : 'BE',
+                    ],
+                    [
+                        'uid' => $this->taskUid,
+                        'serialized_executions' => $checkedValue,
+                    ],
+                    [
+                        'serialized_executions' => Connection::PARAM_LOB,
+                    ]
+                );
+            assert($updateCount === 0 || $updateCount === 1);
 
-        $runningExecutions = [];
-        if ($row && !empty($row['serialized_executions'])) {
-            $runningExecutions = unserialize($row['serialized_executions']);
+            // We need to try again with the new "serialized_executions" value
+            // that was set in the time between the SELECT and the UPDATE sql
+            // statements.
+            if ($updateCount === 0) {
+                continue;
+            }
+
+            return $numExecutions;
         }
-        // Count the number of existing executions and use that number as a key
-        // (we need to know that number, because it is returned at the end of the method)
-        $numExecutions = count($runningExecutions);
-        $runningExecutions[$numExecutions] = time();
-        GeneralUtility::makeInstance(ConnectionPool::class)
-            ->getConnectionForTable('tx_scheduler_task')
-            ->update(
-                'tx_scheduler_task',
-                [
-                    'serialized_executions' => serialize($runningExecutions),
-                    'lastexecution_time' => time(),
-                    // Define the context in which the script is running
-                    'lastexecution_context' => Environment::isCli() ? 'CLI' : 'BE',
-                ],
-                [
-                    'uid' => $this->taskUid,
-                ],
-                [
-                    'serialized_executions' => Connection::PARAM_LOB,
-                ]
-            );
-        return $numExecutions;
     }
 
     /**
      * Removes given execution from list
      *
      * @param int $executionID Id of the execution to remove.
-     * @param \Throwable $e An exception to signal a failed execution
+     * @param \Throwable|false|null $e An exception to signal a failed execution
      */
-    public function unmarkExecution($executionID, ?\Throwable $e = null)
+    public function unmarkExecution($executionID, $e = null)
     {
         // Get the executions for the task
         $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)
             ->getQueryBuilderForTable('tx_scheduler_task');
 
-        $row = $queryBuilder
-            ->select('serialized_executions')
-            ->from('tx_scheduler_task')
-            ->where(
-                $queryBuilder->expr()->eq('uid', $queryBuilder->createNamedParameter($this->taskUid, Connection::PARAM_INT))
-            )
-            ->executeQuery()
-            ->fetchAssociative();
+        for (;;) {
+            $row = $queryBuilder
+                ->select('serialized_executions')
+                ->from('tx_scheduler_task')
+                ->where(
+                    $queryBuilder->expr()->eq('uid', $queryBuilder->createNamedParameter($this->taskUid, Connection::PARAM_INT))
+                )
+                ->executeQuery()
+                ->fetchAssociative();
+
+            if (!$row || ($previousValue = (string)($row['serialized_executions'] ?? '')) === '') {
+                break;
+            }
 
-        if ($row && $row['serialized_executions'] !== '') {
-            $runningExecutions = unserialize($row['serialized_executions']);
+            $runningExecutions = unserialize($previousValue);
             // Remove the selected execution
             unset($runningExecutions[$executionID]);
             if (!empty($runningExecutions)) {
@@ -514,22 +537,33 @@ abstract class AbstractTask implements LoggerAwareInterface
             } else {
                 $failureString = '';
             }
+            $fieldUpdates = [
+                'serialized_executions' => $runningExecutionsSerialized,
+            ];
+            if ($e !== false) {
+                $fieldUpdates['lastexecution_failure'] = $failureString;
+            }
             // Save the updated executions list
-            GeneralUtility::makeInstance(ConnectionPool::class)
+            $updateCount = GeneralUtility::makeInstance(ConnectionPool::class)
                 ->getConnectionForTable('tx_scheduler_task')
                 ->update(
                     'tx_scheduler_task',
-                    [
-                        'serialized_executions' => $runningExecutionsSerialized,
-                        'lastexecution_failure' => $failureString,
-                    ],
+                    $fieldUpdates,
                     [
                         'uid' => $this->taskUid,
+                        'serialized_executions' => $previousValue,
                     ],
                     [
                         'serialized_executions' => Connection::PARAM_LOB,
                     ]
                 );
+            assert($updateCount === 0 || $updateCount === 1);
+
+            // We can only stop trying if our new "serialized_executions" was
+            // actually built upon the latest "serialized_executions" value.
+            if ($updateCount === 1) {
+                break;
+            }
         }
     }
 
-- 
2.43.0

